;; AUTHOR: imindMan
;; Try to implement eww in bar configuration
;; Dashboard maybe later

;; IMPORTANT VARIABLES
(defvar eww "eww -c ~/.config/eww/bar/") ;; main and important eww variable, for commands purpose

(deflisten workspace "scripts/workspace") ;; update the information in the workspace widget
(defpoll wifi_interface  :interval "2s" "~/.config/eww/bar/scripts/wifi --INTERFACE") ; Wifi interface (e.g enp0s3)
(defpoll wifi_icon :interval "2s" "~/.config/eww/bar/scripts/wifi --ICON" ) ; Wifi icon 
(defpoll wifi_color :interval "2s""~/.config/eww/bar/scripts/wifi --COLOR" ) ; Wifi color
(defpoll volume_percent :interval "3s" "amixer sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }'") ; Volume (pulseaudio)
(defpoll vol_icon :interval "3s" "~/.config/eww/bar/scripts/volume --ICON") ; Volume icon 
(defpoll vol_color :interval "3s" "~/.config/eww/bar/scripts/volume --COLOR") ; Volume color 
(defpoll mem_free :interval "3s" "free -m | grep Mem | awk '{print ($4)}'") ; How much are the free RAM?
(defpoll time :interval "350ms" "date +%H:%M") ; Time, e.g 08:12
(defpoll calendar_day :interval "20h" "date '+%d'") ; calendar current day 
(defpoll calendar_year :interval "20h" "date '+%Y'") ; calendar current year 
(defpoll temperature :interval "1m" "scripts/weather") ; Current temperature 
(defvar status " ") ; Current user's status 

; Those variables are just basically keep track of the revealer widget
(defvar wifi_rev false)
(defvar vol_rev false)
(defvar mem_rev false)
(defvar time_rev false)
(defvar temp_rev false)

;; BAR: WINDOW, MAIN PART TO LAUNCH EVERYTHING
(defwindow bar 
        :monitor 0        
        :geometry (geometry :width "98%"
                            :height "3%"
                            :anchor "top center")
        :stacking "fg"
        :reserve (struts :distance "40px" :side "top")
        :windowtype "dock"
        :wm-ignore false 
(bar))


;; Windows for "interactive experiences"  purpose
(defwindow calendar
	:geometry (geometry :x "-20px" 
						:y "4%" 
                        :anchor "top right"
						:width "270px" 
						:height "60px")
(cal))

(defwidget cal []
	(box :class "cal" :orientation "v"
	(box :class "cal-in"
	(calendar :class "cal" 
			  :day calendar_day 
			  :year calendar_year))))

(defwindow information
  :geometry (geometry :x "20px"
                      :y "4%"
                      :anchor "top left"
                      :width "270px"
                      :height "150px"
            )
  (main_info))

(defwidget main_info []

  (box :orientation "vertical" :class "information"
       (label :text " " :class "logo" )

      (label :text "Nothing special - imindMan" :class "bio" 
)))

(defwindow status_win 
  :geometry (geometry :x "40px"
                      :y "4%"
                      :anchor "top left"
                      :width "100px"
                      :height "50px"
    )
  (change_status))
(defwidget change_status []
  (box :orientation "h" :space-evenly false
       :class "status_win"
    (button :onclick "${eww} update status= " " ")
    (button :onclick "${eww} update status=󰌢 " "󰌢 ")
    (button :onclick "${eww} update status= " " ")
    (button :onclick "${eww} update status= " " "))
)
(defwindow power 
  :geometry (geometry :x "-10px"
                      :y "4%"
                      :anchor "top right"
                      :width "100px"
                      :height "50px")
  (main_powermenu))
(defwidget main_powermenu []
  (box :orientation "h" :space-evenly false :class "status_win" 
       (button :class "logout" :onclick "bspc quit" "󰍃 ")
       (button :class "reboot" :onclick "reboot" " ")
       (button :class "lock"   :onclick "betterlockscreen -l dimblur" " ")
       (button :class "shutdown" :onclick "shutdown now" " " ))

)


;; Bar widget - the real content of the bar 
(defwidget bar []
  (box :class "bar" :orientation "horizontal"
       (left)
       (center)
       (right)
        )
  )

; Some content of that bar 
(defwidget left []
  (box :orientation "h" :space-evenly false 
       :halign "left" :spacing 10
  
    (distro)
    (info)
    (status)
    (temperature)
    ))

(defwidget center [] 
   (box :orientation "h" :space-evenly false
        :halign "center"
        :class "center"
    (workspaces)
        ) 
  )

(defwidget right []
    (box :orientation "h" :space-evenly false :spacing 10 :halign "end"
    (wifi)
    (volume)
    (memory)
    (clock)
    (powermenu)
  ))
;; SOME WIDGETS

; Workspace
(defwidget workspaces []
  (box :orientation "h" :space-evenly false 
     
       (literal :content workspace))
)
(defwidget wifi [] 
  (eventbox 
            :onhover "${eww} update wifi_rev=true"
            :onhoverlost "${eww} update wifi_rev=false"
  (box :orientation "h" :space-evenly false :spacing 10 :class "wifi" 
      (button :style "color: ${wifi_color}" wifi_icon)
    (revealer :transition "slideleft" 
              :reveal wifi_rev
              :duration "350ms"
     (label :text wifi_interface :style "color: ${wifi_color};"))
      
    )
  )
)

;; Volume
(defwidget volume []  
  (eventbox 
            :onhover "${eww} update vol_rev=true"
            :onhoverlost "${eww} update vol_rev=false"
  (box :orientation "h" :space-evenly false :spacing 10
      (button :style "color: ${vol_color}" vol_icon )
    (revealer :transition "slideleft" 
              :reveal vol_rev 
              :duration "350ms"
              :style "color: ${vol_color}" 
      volume_percent
    )
   ) 
  )
)


; Memory
(defwidget memory []
  (eventbox 
            :onhover "${eww} update mem_rev=true"
            :onhoverlost "${eww} update mem_rev=false"
  (box :orientation "h" :space-evenly false :spacing 10
      (button  :class "mem" "󰍛 ") 
    (revealer :transition "slideleft" 
              :reveal mem_rev 
              :duration "350ms"
              :style "color: #e0af68;" 
               :class "temperature"
      "${round(mem_free / 1000, 2)} GB free"
    )
       )
  )
  ) 


; Time
(defwidget clock [] 
  (eventbox 
            :onhover "${eww} update time_rev=true"
            :onhoverlost "${eww} update time_rev=false"
  (box :orientation "h" :space-evenly false :spacing 10 :class "time"
       time
          (revealer :transition "slideleft" 
              :reveal time_rev 
              :duration "350ms"
               :class "time"
            (button :onclick "${eww} open --toggle calendar" " ")
    )
       )
  ))

;; FOR LEFT BAR 
; Distro 
(defwidget distro []
  (label :class "distro" :text " ")
  )

; Information 
(defwidget info []

  (button :class "info" :onclick "${eww} open --toggle information" "󰋼 ")

  )

; Status: current user's status
(defwidget status []

  (button :class "status" :onclick "${eww} open --toggle status_win" status))

; temperature 
(defwidget temperature []
  (eventbox 
            :onhover "${eww} update temp_rev=true"
            :onhoverlost "${eww} update temp_rev=false"
  (box :orientation "h" :space-evenly false :spacing 10 :class "temperature"
        "   " 
          (revealer :transition "slideright" 
              :reveal temp_rev 
              :duration "350ms"
         "${temperature} 󰔄 " 
               )
       )
  )
  )

; Powermenu - power up/down your machine
(defwidget powermenu []
  (button :class "powermenu" :onclick "${eww} open --toggle power" " ")
  )
