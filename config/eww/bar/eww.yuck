;; AUTHOR: imindMan
;; Try to implement eww in bar configuration
;; Dashboard maybe later

;; IMPORTANT VARIABLES
(defvar eww "eww -c ~/.config/eww/bar/") ;; main and important eww variable, for commands purpose

(deflisten workspace "scripts/workspace") ;; update the information in the workspace widget
(defpoll wifi_interface  :interval "5s" "~/.config/eww/bar/scripts/wifi --INTERFACE") ; Wifi interface (e.g enp0s3)
(defpoll wifi_icon :interval "5s" "~/.config/eww/bar/scripts/wifi --ICON" ) ; Wifi icon 
(defpoll wifi_color :interval "5s""~/.config/eww/bar/scripts/wifi --COLOR" ) ; Wifi color
(defpoll volume_percent :interval "5s" "~/.config/eww/bar/scripts/volume --VOLUME") ; Volume (pulseaudio)
(defpoll vol_icon :interval "5s" "~/.config/eww/bar/scripts/volume --ICON") ; Volume icon 
(defpoll vol_color :interval "5s" "~/.config/eww/bar/scripts/volume --COLOR") ; Volume color 
(defpoll mem_free :interval "5s" "free -m | grep Mem | awk '{print ($4)}'") ; How much are the free RAM?
(defpoll time :interval "5s" "date +%H:%M") ; Time, e.g 08:12
(defpoll calendar_day :interval "20h" "date '+%d'") ; calendar current day 
(defpoll calendar_year :interval "20h" "date '+%Y'") ; calendar current year 
(defpoll temperature :interval "1m" "scripts/weather") ; Current temperature 

; Those variables are just basically keep track of the revealer widget
(defvar wifi_rev false)
(defvar vol_rev false)
(defvar mem_rev false)
(defvar time_rev false)
(defvar temp_rev false)

(defwindow left
    :monitor 0
    :geometry (
                geometry :x "2%"
                         :y  "1%"
                         :width "12%"
                         :height "5%"
                         :anchor "top left"
               )
    :stacking "fg"
    :reserve (struts :distance "50px" :side "top")
    :windowtype "dock"
    :wm-ignore false
   (box :orientation "h" :space-evenly false
        :halign "center"
        :class "center"
    (workspaces)
        ) 
  )

(defwindow right 
  :monitor 0 
  :geometry (geometry :x "-2%"
                      :y "1%"
                      :width "15%"
                      :height "5%"
                      :anchor "top right")
    (box :orientation "h" :space-evenly false :spacing 10 
    (wifi)
    (volume)
    (memory)
    (clock)
    (powermenu)
  ))
;; SOME WIDGETS

; Workspace
(defwidget workspaces []
  (box :orientation "h" :space-evenly false 
      :style "padding-right: 5px;" 
       (literal :content workspace))
)

(defwindow wifi 
  :geometry (geometry :x "-165px"
                      :y "7%"
                      :anchor "top right"
                      :width "100px"
                      :height "50px")
      (label :text wifi_interface :style "color: ${wifi_color};") 
  )

(defwidget wifi [] 
  (eventbox 
            :onhover "${eww} open wifi"
            :onhoverlost "${eww} close wifi"
  (box :orientation "h" :space-evenly false :spacing 10 :class "wifi" 
      (button :style "color: ${wifi_color}" wifi_icon)      
    )
  )
)

;; Volume
(defwindow volume  
  :geometry (geometry :x "-135px"
                       :y "7%"
                       :anchor "top right"
                       :width "100px"
                       :height "50px")
    (label :text volume_percent :style "color: ${vol_color}")
   ) 
(defwidget volume []  
  (eventbox 
            :onhover "${eww} open volume"
            :onhoverlost "${eww} close volume"
   (box :orientation "h" :space-evenly false :spacing 10 :class "volume"
       (button :style "color: ${vol_color}" vol_icon )
   ) 
  )
)


; Memory
(defwindow memory 
  :geometry (geometry :x "-95px"
                      :y "7%"
                      :anchor "top right"
                      :width "150px"
                      :height "50px")
      
   (label :text  "${round(mem_free / 1000, 2)} GB free" :style "color: #e0af68;" 
               :class "mem_win"))
(defwidget memory []
  (eventbox 
            :onhover "${eww} open memory" 
            :onhoverlost "${eww} close memory"
  (box :orientation "h" :space-evenly false :spacing 10
      (button  :class "mem" "󰍛 ") )
  )
  ) 
(defwindow calendar
	:geometry (geometry :x "-20px" 
						:y "7%" 
                        :anchor "top right"
						:width "270px" 
						:height "60px")
(cal))

(defwidget cal []
	(box :class "cal" :orientation "v"
	(box :class "cal-in"
	(calendar :class "cal" 
			  :day calendar_day 
			  :year calendar_year))))

; Time
(defwidget clock [] 
  (eventbox 
            :onhover "${eww} open calendar"
            :onhoverlost "${eww} close calendar" 
  (box :orientation "h" :space-evenly false :spacing 10 :class "time"
       time
          
       )
  ))

(defwindow power 
  :geometry (geometry :x "-2%"
                      :y "7%"
                      :anchor "top right"
                      :width "100px"
                      :height "50px")
  (main_powermenu))
(defwidget main_powermenu []
  (box :orientation "h" :space-evenly false :class "status_win" 
       (button :class "logout" :onclick "bspc quit" "󰍃 ")
       (button :class "reboot" :onclick "reboot" " ")
       (button :class "lock"   :onclick "~/.config/bspwm/bspwmlock" " ")
       (button :class "shutdown" :onclick "shutdown now" " " ))
)

; Powermenu - power up/down your machine
(defwidget powermenu []
  (button :class "powermenu" :onclick "${eww} open --toggle power" " ")
  )
